name: scan-logs

on:
  schedule:
    - cron: "23 2 * * *"   # daily at 02:23 UTC
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch recent logs (optional)
        run: |
          mkdir -p logs
          # Replace this with real fetching from Sentry/Datadog/CloudWatch if desired
          echo "[]" > logs/sentry.json

      - name: Analyze logs with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cat > analyze.mjs <<'NODE'
          import fs from 'fs';
          import OpenAI from 'openai';

          const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

          // Simple retry for transient 429/5xx errors
          async function withRetry(fn, {retries=3, minDelay=1000} = {}) {
            let lastErr;
            for (let i = 0; i <= retries; i++) {
              try { return await fn(); }
              catch (e) {
                lastErr = e;
                const status = e?.status || e?.code;
                if (status === 429 || status === 500 || status === 503) {
                  const delay = minDelay * Math.pow(2, i);
                  await new Promise(r => setTimeout(r, delay));
                  continue;
                }
                throw e;
              }
            }
            throw lastErr;
          }

          const logs = fs.existsSync('logs/sentry.json')
            ? fs.readFileSync('logs/sentry.json','utf8')
            : '[]';

          const prompt = `You are an SRE assistant. Analyze the JSON logs below:
          - Cluster similar errors
          - Suggest likely root causes
          - Propose concrete fixes
          Return Markdown only.
          Logs:
          ${logs.slice(0,180000)}`;

          const resp = await withRetry(() =>
            openai.chat.completions.create({
              model: "gpt-5-mini",     // no temperature param for gpt-5 family
              messages: [
                { role: "system", content: "Return only Markdown." },
                { role: "user", content: prompt }
              ]
            }),
            { retries: 3, minDelay: 1500 }
          );

          fs.writeFileSync('triage.md', resp.choices[0].message.content, 'utf8');
          console.log('Wrote triage.md');
          NODE

          node analyze.mjs

      - name: (Debug) Print triage.md to logs
        run: |
          echo "---- triage.md ----"
          cat triage.md || echo "triage.md missing"
          echo "-------------------"

      - name: Create/Update issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Error log triage report"
          content-filepath: triage.md
          labels: triage, automated