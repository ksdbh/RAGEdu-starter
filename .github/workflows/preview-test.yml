name: Preview Test

on:
  pull_request:
  push:
    branches-ignore:
      - main

concurrency:
  group: preview-test
  cancel-in-progress: true

jobs:
  preview-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & start services with docker-compose
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
        run: |
          # Use the dev docker-compose to build backend, frontend and keep opensearch/localstack
          docker compose -f docker-compose.dev.yml up --build -d

      - name: Wait for backend to be healthy
        # This step retries for up to ~2 minutes (adjustable)
        run: |
          set -euo pipefail
          echo "Waiting for backend /health to return 'ok'..."
          max_attempts=24
          attempt=1
          until [ $attempt -gt $max_attempts ]
          do
            if curl -sS http://localhost:8000/health | grep -iq "ok"; then
              echo "backend healthy"
              break
            fi
            echo "Attempt $attempt/$max_attempts: backend not healthy yet"
            attempt=$((attempt+1))
            sleep 5
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "backend did not become healthy in time"
            docker compose -f docker-compose.dev.yml ps || true
            docker compose -f docker-compose.dev.yml logs backend || true
            exit 1
          fi

      - name: Install jq for response assertions
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: E2E smoke: POST /rag/answer and assert keys
        env:
          BACKEND_URL: http://localhost:8000
        run: |
          set -euo pipefail
          echo "Posting to $BACKEND_URL/rag/answer"

          # Try a simple JSON body; the scaffold RAG endpoint should return JSON with `answer` and `citations` fields
          # Adjust the payload if your endpoint expects a different shape.
          payload='{"query": "smoke test"}'

          resp=$(curl -sS -X POST "$BACKEND_URL/rag/answer" -H "Content-Type: application/json" -d "$payload" || true)
          echo "Response: $resp"

          # Ensure response is valid JSON and contains both keys
          echo "$resp" | jq -e '.answer and .citations' >/dev/null

      - name: (Optional) Assert frontend is up at /demo
        continue-on-error: true
        run: |
          echo "Checking frontend at http://localhost:3000/demo"
          # allow some extra warmup time for the frontend container
          max_attempts=12
          attempt=1
          until [ $attempt -gt $max_attempts ]
          do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/demo || true)
            if [ "$status" = "200" ]; then
              echo "Frontend responded 200"
              break
            fi
            echo "Attempt $attempt/$max_attempts: frontend not ready (status=$status)"
            attempt=$((attempt+1))
            sleep 5
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "Frontend did not respond 200 in time - continuing since this check is optional"
          fi

      - name: Frontend: install deps & build (uploadable artifact)
        working-directory: frontend
        run: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/.next
            frontend/package.json

    # Always attempt to tear down compose services so runner is cleaned up
    post:
      always:
        - name: Tear down docker-compose
          if: always()
          run: |
            docker compose -f docker-compose.dev.yml down -v --remove-orphans || true
